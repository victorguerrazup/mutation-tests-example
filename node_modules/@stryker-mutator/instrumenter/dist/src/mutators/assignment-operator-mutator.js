"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.assignmentOperatorMutator = void 0;
const tslib_1 = require("tslib");
const types = (0, tslib_1.__importStar)(require("@babel/types"));
var AssignmentOperators;
(function (AssignmentOperators) {
    AssignmentOperators["+="] = "-=";
    AssignmentOperators["-="] = "+=";
    AssignmentOperators["*="] = "/=";
    AssignmentOperators["/="] = "*=";
    AssignmentOperators["%="] = "*=";
    AssignmentOperators["<<="] = ">>=";
    AssignmentOperators[">>="] = "<<=";
    AssignmentOperators["&="] = "|=";
    AssignmentOperators["|="] = "&=";
    AssignmentOperators["&&="] = "||=";
    AssignmentOperators["||="] = "&&=";
    AssignmentOperators["??="] = "&&=";
})(AssignmentOperators || (AssignmentOperators = {}));
const stringTypes = Object.freeze(['StringLiteral', 'TemplateLiteral']);
const stringAssignmentTypes = Object.freeze(['&&=', '||=', '??=']);
exports.assignmentOperatorMutator = {
    name: 'AssignmentOperator',
    *mutate(path) {
        if (path.isAssignmentExpression() && isSupportedAssignmentOperator(path.node.operator) && isSupported(path.node)) {
            const mutatedOperator = AssignmentOperators[path.node.operator];
            const replacement = types.cloneNode(path.node, false);
            replacement.operator = mutatedOperator;
            yield replacement;
        }
    },
};
function isSupportedAssignmentOperator(operator) {
    return Object.keys(AssignmentOperators).includes(operator);
}
function isSupported(node) {
    // Excludes assignment operators that apply to strings.
    if (stringTypes.includes(node.right.type) && !stringAssignmentTypes.includes(node.operator)) {
        return false;
    }
    return true;
}
//# sourceMappingURL=assignment-operator-mutator.js.map