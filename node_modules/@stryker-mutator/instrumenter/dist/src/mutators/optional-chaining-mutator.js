"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.optionalChainingMutator = void 0;
const core_1 = require("@babel/core");
/**
 * Mutates optional chaining operators
 * Note that the AST for optional chaining might not be what you expect. Nodes of type `OptionalMemberExpression` can be either optional or not-optional
 *
 * For example: In this expression: `foo?.bar.baz` the `.baz` member expression is of type `OptionalMemberExpression`, because it is part of an optional chain, but is is _not_ optional.
 * Only the `.bar` optional member expression is optional.
 *
 * @example
 * foo?.bar -> foo.bar
 * foo?.[1] -> foo[1]
 * foo?.() -> foo()
 */
exports.optionalChainingMutator = {
    name: 'OptionalChaining',
    *mutate(path) {
        if (path.isOptionalMemberExpression() && path.node.optional) {
            yield core_1.types.optionalMemberExpression(core_1.types.cloneNode(path.node.object, true), core_1.types.cloneNode(path.node.property, true), path.node.computed, 
            /*optional*/ false);
        }
        if (path.isOptionalCallExpression() && path.node.optional) {
            yield core_1.types.optionalCallExpression(core_1.types.cloneNode(path.node.callee, true), path.node.arguments.map((arg) => core_1.types.cloneNode(arg, true)), 
            /*optional*/ false);
        }
    },
};
//# sourceMappingURL=optional-chaining-mutator.js.map