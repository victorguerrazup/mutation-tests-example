"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.arithmeticOperatorMutator = void 0;
const core_1 = require("@babel/core");
var ArithmeticOperators;
(function (ArithmeticOperators) {
    ArithmeticOperators["+"] = "-";
    ArithmeticOperators["-"] = "+";
    ArithmeticOperators["*"] = "/";
    ArithmeticOperators["/"] = "*";
    ArithmeticOperators["%"] = "*";
})(ArithmeticOperators || (ArithmeticOperators = {}));
exports.arithmeticOperatorMutator = {
    name: 'ArithmeticOperator',
    *mutate(path) {
        if (path.isBinaryExpression() && isSupported(path.node.operator, path.node)) {
            const mutatedOperator = ArithmeticOperators[path.node.operator];
            const replacement = core_1.types.cloneNode(path.node, false);
            replacement.operator = mutatedOperator;
            yield replacement;
        }
    },
};
function isSupported(operator, node) {
    if (!Object.keys(ArithmeticOperators).includes(operator)) {
        return false;
    }
    const stringTypes = ['StringLiteral', 'TemplateLiteral'];
    const leftType = node.left.type === 'BinaryExpression' ? node.left.right.type : node.left.type;
    if (stringTypes.includes(node.right.type) || stringTypes.includes(leftType)) {
        return false;
    }
    return true;
}
//# sourceMappingURL=arithmetic-operator-mutator.js.map