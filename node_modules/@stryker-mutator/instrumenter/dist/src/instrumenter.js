"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.Instrumenter = void 0;
const tslib_1 = require("tslib");
const path_1 = (0, tslib_1.__importDefault)(require("path"));
const plugin_1 = require("@stryker-mutator/api/plugin");
const core_1 = require("@stryker-mutator/api/core");
const parsers_1 = require("./parsers");
const transformers_1 = require("./transformers");
const printers_1 = require("./printers");
/**
 * The instrumenter is responsible for
 * * Generating mutants based on source files
 * * Instrumenting the source code with the mutants placed in `mutant switches`.
 * * Adding mutant coverage expressions in the source code.
 * @see https://github.com/stryker-mutator/stryker-js/issues/1514
 */
class Instrumenter {
    constructor(logger) {
        this.logger = logger;
    }
    async instrument(files, options) {
        this.logger.debug('Instrumenting %d source files with mutants', files.length);
        const mutantCollector = new transformers_1.MutantCollector();
        const outFiles = [];
        let mutantCount = 0;
        const parse = (0, parsers_1.createParser)(options);
        for await (const file of files) {
            const ast = await parse(file.textContent, file.name);
            (0, transformers_1.transform)(ast, mutantCollector, { options: { ...options, mutationRanges: options.mutationRanges.map(toBabelLineNumber) } });
            const mutatedContent = (0, printers_1.print)(ast);
            outFiles.push(new core_1.File(file.name, mutatedContent));
            if (this.logger.isDebugEnabled()) {
                const nrOfMutantsInFile = mutantCollector.mutants.length - mutantCount;
                mutantCount = mutantCollector.mutants.length;
                this.logger.debug(`Instrumented ${path_1.default.relative(process.cwd(), file.name)} (${nrOfMutantsInFile} mutant(s))`);
            }
        }
        const mutants = mutantCollector.mutants.map((mutant) => mutant.toApiMutant());
        this.logger.info('Instrumented %d source file(s) with %d mutant(s)', files.length, mutants.length);
        return {
            files: outFiles,
            mutants,
        };
    }
}
exports.Instrumenter = Instrumenter;
Instrumenter.inject = (0, plugin_1.tokens)(plugin_1.commonTokens.logger);
function toBabelLineNumber(range) {
    const start = range.start.line;
    const end = range.end.line;
    return {
        ...range,
        end: {
            ...range.end,
            line: end + 1,
        },
        start: {
            ...range.start,
            line: start + 1,
        },
    };
}
//# sourceMappingURL=instrumenter.js.map