"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.statementMutantPlacer = void 0;
const core_1 = require("@babel/core");
const syntax_helpers_1 = require("../util/syntax-helpers");
/**
 * Mutant placer that places mutants in statements that allow it.
 * It uses an `if` statement to do so
 */
exports.statementMutantPlacer = {
    name: 'statementMutantPlacer',
    canPlace(path) {
        return path.isStatement();
    },
    place(path, appliedMutants) {
        let statement = core_1.types.blockStatement([
            core_1.types.expressionStatement((0, syntax_helpers_1.mutationCoverageSequenceExpression)(appliedMutants.keys())),
            ...(path.isBlockStatement() ? path.node.body : [path.node]),
        ]);
        for (const [mutant, appliedMutant] of appliedMutants) {
            statement = core_1.types.ifStatement((0, syntax_helpers_1.mutantTestExpression)(mutant.id), core_1.types.blockStatement([appliedMutant]), statement);
        }
        path.replaceWith(path.isBlockStatement() ? core_1.types.blockStatement([statement]) : statement);
    },
};
//# sourceMappingURL=statement-mutant-placer.js.map