"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.toMutantRunResult = exports.determineHitLimitReached = void 0;
const test_status_1 = require("./test-status");
const mutant_run_result_1 = require("./mutant-run-result");
const dry_run_status_1 = require("./dry-run-status");
function determineHitLimitReached(hitCount, hitLimit) {
    if (hitCount !== undefined && hitLimit !== undefined && hitCount > hitLimit) {
        return { status: dry_run_status_1.DryRunStatus.Timeout, reason: `Hit limit reached (${hitCount}/${hitLimit})` };
    }
    return;
}
exports.determineHitLimitReached = determineHitLimitReached;
function toMutantRunResult(dryRunResult, reportAllKillers = false) {
    switch (dryRunResult.status) {
        case dry_run_status_1.DryRunStatus.Complete: {
            const failedTests = dryRunResult.tests.filter((test) => test.status === test_status_1.TestStatus.Failed);
            const nrOfTests = dryRunResult.tests.filter((test) => test.status !== test_status_1.TestStatus.Skipped).length;
            if (failedTests.length > 0) {
                return {
                    status: mutant_run_result_1.MutantRunStatus.Killed,
                    failureMessage: failedTests[0].failureMessage,
                    killedBy: reportAllKillers ? failedTests.map((test) => test.id) : failedTests[0].id,
                    nrOfTests,
                };
            }
            else {
                return {
                    status: mutant_run_result_1.MutantRunStatus.Survived,
                    nrOfTests,
                };
            }
        }
        case dry_run_status_1.DryRunStatus.Error:
            return {
                status: mutant_run_result_1.MutantRunStatus.Error,
                errorMessage: dryRunResult.errorMessage,
            };
        case dry_run_status_1.DryRunStatus.Timeout:
            return {
                status: mutant_run_result_1.MutantRunStatus.Timeout,
                reason: dryRunResult.reason,
            };
    }
}
exports.toMutantRunResult = toMutantRunResult;
//# sourceMappingURL=run-result-helpers.js.map