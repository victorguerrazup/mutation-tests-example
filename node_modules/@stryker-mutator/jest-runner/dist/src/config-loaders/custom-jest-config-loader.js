"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CustomJestConfigLoader = void 0;
const tslib_1 = require("tslib");
const fs_1 = (0, tslib_1.__importDefault)(require("fs"));
const path_1 = (0, tslib_1.__importDefault)(require("path"));
const plugin_1 = require("@stryker-mutator/api/plugin");
const util_1 = require("@stryker-mutator/util");
/**
 * The Default config loader will load the Jest configuration using the package.json in the package root
 */
class CustomJestConfigLoader {
    constructor(log, options) {
        this.log = log;
        this.options = options;
    }
    loadConfig() {
        var _a, _b;
        const jestConfig = (_b = (_a = this.readConfigFromJestConfigFile()) !== null && _a !== void 0 ? _a : this.readConfigFromPackageJson()) !== null && _b !== void 0 ? _b : {};
        this.log.debug('Final jest config: %s', jestConfig);
        return jestConfig;
    }
    readConfigFromJestConfigFile() {
        const configFilePath = this.resolveJestConfigFilePath();
        if (configFilePath) {
            const config = (0, util_1.requireResolve)(configFilePath);
            this.log.debug(`Read Jest config from ${configFilePath}`);
            this.setRootDir(config, configFilePath);
            return config;
        }
        return undefined;
    }
    readConfigFromPackageJson() {
        var _a;
        const pkgJsonFilePath = this.resolvePackageJsonFilePath();
        if (pkgJsonFilePath) {
            const config = (_a = JSON.parse(fs_1.default.readFileSync(pkgJsonFilePath, 'utf8')).jest) !== null && _a !== void 0 ? _a : {};
            this.log.debug(`Read Jest config from ${pkgJsonFilePath}`);
            this.setRootDir(config, pkgJsonFilePath);
            return config;
        }
        return undefined;
    }
    resolvePackageJsonFilePath() {
        var _a;
        const jestOptions = this.options;
        const packageJsonCandidate = path_1.default.resolve((_a = jestOptions.jest.configFile) !== null && _a !== void 0 ? _a : 'package.json');
        if (packageJsonCandidate.endsWith('package.json') && (jestOptions.jest.configFile || fs_1.default.existsSync(packageJsonCandidate))) {
            return packageJsonCandidate;
        }
        return undefined;
    }
    setRootDir(config, configFilePath) {
        var _a;
        config.rootDir = path_1.default.resolve(path_1.default.dirname(configFilePath), (_a = config.rootDir) !== null && _a !== void 0 ? _a : '.');
    }
    resolveJestConfigFilePath() {
        var _a;
        const jestOptions = this.options;
        const configFileCandidate = path_1.default.resolve((_a = jestOptions.jest.configFile) !== null && _a !== void 0 ? _a : 'jest.config.js');
        if (!configFileCandidate.endsWith('package.json') && (jestOptions.jest.configFile || fs_1.default.existsSync(configFileCandidate))) {
            return configFileCandidate;
        }
        return undefined;
    }
}
exports.CustomJestConfigLoader = CustomJestConfigLoader;
CustomJestConfigLoader.inject = (0, plugin_1.tokens)(plugin_1.commonTokens.logger, plugin_1.commonTokens.options);
//# sourceMappingURL=custom-jest-config-loader.js.map