"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.jestTestAdapterFactory = void 0;
const tslib_1 = require("tslib");
const plugin_1 = require("@stryker-mutator/api/plugin");
const semver_1 = (0, tslib_1.__importDefault)(require("semver"));
const plugin_tokens_1 = require("../plugin-tokens");
const jest_less_than_25_adapter_1 = require("./jest-less-than-25-adapter");
const jest_greater_than_25_adapter_1 = require("./jest-greater-than-25-adapter");
function jestTestAdapterFactory(log, jest, options, injector) {
    log.debug('Detected Jest version %s', jest);
    guardJestVersion(jest, options, log);
    if (semver_1.default.satisfies(jest, '<25.0.0')) {
        return injector.injectClass(jest_less_than_25_adapter_1.JestLessThan25TestAdapter);
    }
    else {
        return injector.injectClass(jest_greater_than_25_adapter_1.JestGreaterThan25TestAdapter);
    }
}
exports.jestTestAdapterFactory = jestTestAdapterFactory;
jestTestAdapterFactory.inject = (0, plugin_1.tokens)(plugin_1.commonTokens.logger, plugin_tokens_1.jestVersion, plugin_1.commonTokens.options, plugin_1.commonTokens.injector);
function guardJestVersion(jest, options, log) {
    if (semver_1.default.satisfies(jest, '<22.0.0')) {
        throw new Error(`You need Jest version >= 22.0.0 to use the @stryker-mutator/jest-runner plugin, found ${jest}`);
    }
    else if (semver_1.default.satisfies(jest, '<24')) {
        if (options.coverageAnalysis !== 'off') {
            throw new Error(`You need Jest version >= 24.0.0 to use the @stryker-mutator/jest-runner with "coverageAnalysis": "${options.coverageAnalysis}", you're currently using version 23.0.0. Please upgrade your jest version, or set "coverageAnalysis": "off".`);
        }
        log.warn('[DEPRECATED] Support for Jest version < 24 is deprecated and will be removed in the next major version of Stryker, please upgrade your jest version (your current version is %s).', jest);
    }
}
//# sourceMappingURL=jest-test-adapter-factory.js.map