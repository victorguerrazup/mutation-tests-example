"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.HtmlReporter = exports.RESOURCES_DIR_NAME = void 0;
const tslib_1 = require("tslib");
const path_1 = (0, tslib_1.__importDefault)(require("path"));
const file_url_1 = (0, tslib_1.__importDefault)(require("file-url"));
const plugin_1 = require("@stryker-mutator/api/plugin");
const ReporterUtil = (0, tslib_1.__importStar)(require("../reporter-util"));
const report_template_1 = require("./report-template");
const DEFAULT_BASE_FOLDER = path_1.default.normalize('reports/mutation/html');
exports.RESOURCES_DIR_NAME = 'strykerResources';
class HtmlReporter {
    constructor(options, log) {
        this.options = options;
        this.log = log;
    }
    onMutationTestReportReady(report) {
        this.mainPromise = this.generateReport(report);
    }
    wrapUp() {
        return this.mainPromise;
    }
    async generateReport(report) {
        const indexFileName = path_1.default.resolve(this.baseDir, 'index.html');
        const singleFile = await (0, report_template_1.reportTemplate)(report);
        await this.cleanBaseFolder();
        await ReporterUtil.writeFile(path_1.default.resolve(this.baseDir, 'index.html'), singleFile);
        this.log.info(`Your report can be found at: ${(0, file_url_1.default)(indexFileName)}`);
    }
    get baseDir() {
        var _a;
        if (!this._baseDir) {
            if ((_a = this.options.htmlReporter) === null || _a === void 0 ? void 0 : _a.baseDir) {
                this._baseDir = this.options.htmlReporter.baseDir;
                this.log.debug(`Using configured output folder ${this._baseDir}`);
            }
            else {
                this.log.debug(`No base folder configuration found (using configuration: htmlReporter: { baseDir: 'output/folder' }), using default ${DEFAULT_BASE_FOLDER}`);
                this._baseDir = DEFAULT_BASE_FOLDER;
            }
        }
        return this._baseDir;
    }
    async cleanBaseFolder() {
        await ReporterUtil.deleteDir(this.baseDir);
        await ReporterUtil.mkdir(this.baseDir);
    }
}
exports.HtmlReporter = HtmlReporter;
HtmlReporter.inject = (0, plugin_1.tokens)(plugin_1.commonTokens.options, plugin_1.commonTokens.logger);
//# sourceMappingURL=html-reporter.js.map