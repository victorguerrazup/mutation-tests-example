"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ProgressBarReporter = void 0;
const progress_bar_1 = require("./progress-bar");
const progress_keeper_1 = require("./progress-keeper");
class ProgressBarReporter extends progress_keeper_1.ProgressKeeper {
    onAllMutantsMatchedWithTests(matchedMutants) {
        super.onAllMutantsMatchedWithTests(matchedMutants);
        const progressBarContent = 'Mutation testing  [:bar] :percent (elapsed: :et, remaining: :etc) :tested/:total tested (:survived survived, :timedOut timed out)';
        this.progressBar = new progress_bar_1.ProgressBar(progressBarContent, {
            complete: '=',
            incomplete: ' ',
            stream: process.stdout,
            total: this.progress.total,
            width: 50,
        });
    }
    onMutantTested(result) {
        const ticksBefore = this.progress.tested;
        super.onMutantTested(result);
        const progressBarContent = { ...this.progress, et: this.getElapsedTime(), etc: this.getEtc() };
        if (ticksBefore < this.progress.tested) {
            this.tick(progressBarContent);
        }
        else {
            this.render(progressBarContent);
        }
    }
    tick(tickObj) {
        var _a;
        (_a = this.progressBar) === null || _a === void 0 ? void 0 : _a.tick(tickObj);
    }
    render(renderObj) {
        var _a;
        if ((_a = this.progressBar) === null || _a === void 0 ? void 0 : _a.total) {
            this.progressBar.render(renderObj);
        }
    }
}
exports.ProgressBarReporter = ProgressBarReporter;
//# sourceMappingURL=progress-reporter.js.map