"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.random = exports.kill = exports.setExitCode = exports.isWarningEnabled = exports.getEnvironmentVariableOrThrow = exports.undefinedEmptyString = exports.getEnvironmentVariable = void 0;
const tslib_1 = require("tslib");
const tree_kill_1 = (0, tslib_1.__importDefault)(require("tree-kill"));
const util_1 = require("@stryker-mutator/util");
/**
 * A wrapper around `process.env` (for testability)
 */
function getEnvironmentVariable(nameEnvironmentVariable) {
    return process.env[nameEnvironmentVariable];
}
exports.getEnvironmentVariable = getEnvironmentVariable;
function undefinedEmptyString(str) {
    if (str) {
        return str;
    }
    return undefined;
}
exports.undefinedEmptyString = undefinedEmptyString;
function getEnvironmentVariableOrThrow(name) {
    const value = getEnvironmentVariable(name);
    if (value === undefined) {
        throw new util_1.StrykerError(`Missing environment variable "${name}"`);
    }
    else {
        return value;
    }
}
exports.getEnvironmentVariableOrThrow = getEnvironmentVariableOrThrow;
function isWarningEnabled(warningType, warningOptions) {
    if (typeof warningOptions === 'boolean') {
        return warningOptions;
    }
    else {
        return !!warningOptions[warningType];
    }
}
exports.isWarningEnabled = isWarningEnabled;
/**
 * A wrapper around `process.exitCode = n` (for testability)
 */
function setExitCode(n) {
    process.exitCode = n;
}
exports.setExitCode = setExitCode;
function kill(pid) {
    return new Promise((res, rej) => {
        (0, tree_kill_1.default)(pid, 'SIGKILL', (err) => {
            if (err && !canIgnore(err.code)) {
                rej(err);
            }
            else {
                res();
            }
        });
        function canIgnore(code) {
            // https://docs.microsoft.com/en-us/windows/desktop/Debug/system-error-codes--0-499-
            // these error codes mean the program is _already_ closed.
            return code === 255 || code === 128;
        }
    });
}
exports.kill = kill;
/**
 * Creates a random integer number.
 * @returns A random integer.
 */
function random() {
    return Math.ceil(Math.random() * 10000000);
}
exports.random = random;
//# sourceMappingURL=object-utils.js.map