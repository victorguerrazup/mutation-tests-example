"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChildProcessProxyWorker = void 0;
const tslib_1 = require("tslib");
const path_1 = (0, tslib_1.__importDefault)(require("path"));
const util_1 = require("@stryker-mutator/util");
const log4js_1 = require("log4js");
const di_1 = require("../di");
const logging_1 = require("../logging");
const string_utils_1 = require("../utils/string-utils");
const message_protocol_1 = require("./message-protocol");
class ChildProcessProxyWorker {
    constructor() {
        // Make sure to bind the methods in order to ensure the `this` pointer
        this.handleMessage = this.handleMessage.bind(this);
        process.on('message', this.handleMessage);
    }
    send(value) {
        if (process.send) {
            const str = (0, string_utils_1.serialize)(value);
            process.send(str);
        }
    }
    handleMessage(serializedMessage) {
        const message = (0, string_utils_1.deserialize)(String(serializedMessage));
        switch (message.kind) {
            case message_protocol_1.WorkerMessageKind.Init:
                this.handleInit(message);
                this.removeAnyAdditionalMessageListeners(this.handleMessage);
                break;
            case message_protocol_1.WorkerMessageKind.Call:
                this.handleCall(message);
                this.removeAnyAdditionalMessageListeners(this.handleMessage);
                break;
            case message_protocol_1.WorkerMessageKind.Dispose:
                const sendCompleted = () => {
                    this.send({ kind: message_protocol_1.ParentMessageKind.DisposeCompleted });
                };
                logging_1.LogConfigurator.shutdown().then(sendCompleted).catch(sendCompleted);
                break;
        }
    }
    handleInit(message) {
        logging_1.LogConfigurator.configureChildProcess(message.loggingContext);
        this.log = (0, log4js_1.getLogger)(ChildProcessProxyWorker.name);
        this.handlePromiseRejections();
        let injector = (0, di_1.buildChildProcessInjector)(message.options);
        const locals = message.additionalInjectableValues;
        for (const token in locals) {
            injector = injector.provideValue(token, locals[token]);
        }
        // we want it sync
        // eslint-disable-next-line @typescript-eslint/no-require-imports
        const RealSubjectClass = require(message.requirePath)[message.requireName];
        const workingDir = path_1.default.resolve(message.workingDirectory);
        if (process.cwd() !== workingDir) {
            this.log.debug(`Changing current working directory for this process to ${workingDir}`);
            process.chdir(workingDir);
        }
        // eslint-disable-next-line @typescript-eslint/no-unsafe-argument
        this.realSubject = injector.injectClass(RealSubjectClass);
        this.send({ kind: message_protocol_1.ParentMessageKind.Initialized });
    }
    async handleCall(message) {
        try {
            const result = await this.doCall(message);
            this.send({
                correlationId: message.correlationId,
                kind: message_protocol_1.ParentMessageKind.Result,
                result,
            });
        }
        catch (err) {
            this.send({
                correlationId: message.correlationId,
                error: (0, util_1.errorToString)(err),
                kind: message_protocol_1.ParentMessageKind.Rejection,
            });
        }
    }
    doCall(message) {
        if (typeof this.realSubject[message.methodName] === 'function') {
            return this.realSubject[message.methodName](...message.args);
        }
        else {
            return this.realSubject[message.methodName];
        }
    }
    /**
     * Remove any addition message listeners that might me eavesdropping.
     * the @ngtools/webpack plugin listens to messages and throws an error whenever it could not handle a message
     * @see https://github.com/angular/angular-cli/blob/f776d3cf7982b64734c57fe4407434e9f4ec09f7/packages/%40ngtools/webpack/src/type_checker.ts#L79
     * @param exceptListener The listener that should remain
     */
    removeAnyAdditionalMessageListeners(exceptListener) {
        process.listeners('message').forEach((listener) => {
            var _a;
            if (listener !== exceptListener) {
                (_a = this.log) === null || _a === void 0 ? void 0 : _a.debug("Removing an additional message listener, we don't want eavesdropping on our inter-process communication: %s", listener.toString());
                process.removeListener('message', listener);
            }
        });
    }
    /**
     * During mutation testing, it's to be expected that promise rejections are not handled synchronously anymore (or not at all)
     * Let's handle those events so future versions of node don't crash
     * See issue 350: https://github.com/stryker-mutator/stryker-js/issues/350
     */
    handlePromiseRejections() {
        const unhandledRejections = [];
        process.on('unhandledRejection', (reason, promise) => {
            var _a;
            const unhandledPromiseId = unhandledRejections.push(promise);
            (_a = this.log) === null || _a === void 0 ? void 0 : _a.debug(`UnhandledPromiseRejectionWarning: Unhandled promise rejection (rejection id: ${unhandledPromiseId}): ${reason}`);
        });
        process.on('rejectionHandled', (promise) => {
            var _a;
            const unhandledPromiseId = unhandledRejections.indexOf(promise) + 1;
            (_a = this.log) === null || _a === void 0 ? void 0 : _a.debug(`PromiseRejectionHandledWarning: Promise rejection was handled asynchronously (rejection id: ${unhandledPromiseId})`);
        });
    }
}
exports.ChildProcessProxyWorker = ChildProcessProxyWorker;
// Prevent side effects for merely requiring the file
// Only actually start the child worker when it is requested
// Stryker disable all
if (require.main === module) {
    new ChildProcessProxyWorker();
}
// Stryker restore all
//# sourceMappingURL=child-process-proxy-worker.js.map