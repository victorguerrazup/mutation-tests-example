import execa from 'execa';
import { StrykerOptions, File } from '@stryker-mutator/api/core';
import { I } from '@stryker-mutator/util';
import { Logger } from '@stryker-mutator/api/logging';
import { Disposable } from '@stryker-mutator/api/plugin';
import { TemporaryDirectory } from '../utils/temporary-directory';
import { UnexpectedExitHandler } from '../unexpected-exit-handler';
export declare class Sandbox implements Disposable {
    private readonly options;
    private readonly log;
    private readonly files;
    private readonly exec;
    private readonly fileMap;
    readonly workingDirectory: string;
    private readonly backupDirectory;
    static readonly inject: ["options", "logger", "temporaryDirectory", "files", "execa", "unexpectedExitRegistry"];
    constructor(options: StrykerOptions, log: Logger, temporaryDirectory: I<TemporaryDirectory>, files: readonly File[], exec: typeof execa, unexpectedExitHandler: I<UnexpectedExitHandler>);
    init(): Promise<void>;
    sandboxFileFor(fileName: string): string;
    originalFileFor(sandboxFileName: string): string;
    private fillSandbox;
    private runBuildCommand;
    private symlinkNodeModulesIfNeeded;
    private fillFile;
    dispose(unexpected?: boolean): void;
}
//# sourceMappingURL=sandbox.d.ts.map