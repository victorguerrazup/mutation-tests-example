"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DisableTypeChecksPreprocessor = void 0;
const tslib_1 = require("tslib");
const path_1 = (0, tslib_1.__importDefault)(require("path"));
const plugin_1 = require("@stryker-mutator/api/plugin");
const util_1 = require("@stryker-mutator/util");
const di_1 = require("../di");
const object_utils_1 = require("../utils/object-utils");
const config_1 = require("../config");
/**
 * Disabled type checking by inserting `@ts-nocheck` atop TS/JS files and removing other @ts-xxx directives from comments:
 * @see https://github.com/stryker-mutator/stryker-js/issues/2438
 */
class DisableTypeChecksPreprocessor {
    constructor(log, options, impl) {
        this.log = log;
        this.options = options;
        this.impl = impl;
    }
    async preprocess(files) {
        const matcher = new config_1.FileMatcher(this.options.disableTypeChecks);
        let warningLogged = false;
        const outFiles = await Promise.all(files.map(async (file) => {
            if (matcher.matches(path_1.default.resolve(file.name))) {
                try {
                    return await this.impl(file, { plugins: this.options.mutator.plugins });
                }
                catch (err) {
                    if ((0, object_utils_1.isWarningEnabled)('preprocessorErrors', this.options.warnings)) {
                        warningLogged = true;
                        this.log.warn(`Unable to disable type checking for file "${file.name}". Shouldn't type checking be disabled for this file? Consider configuring a more restrictive "${(0, util_1.propertyPath)('disableTypeChecks')}" settings (or turn it completely off with \`false\`)`, err);
                    }
                    return file;
                }
            }
            else {
                return file;
            }
        }));
        if (warningLogged) {
            this.log.warn(`(disable "${util_1.PropertyPathBuilder.create().prop('warnings').prop('preprocessorErrors')}" to ignore this warning`);
        }
        return outFiles;
    }
}
exports.DisableTypeChecksPreprocessor = DisableTypeChecksPreprocessor;
DisableTypeChecksPreprocessor.inject = (0, plugin_1.tokens)(plugin_1.commonTokens.logger, plugin_1.commonTokens.options, di_1.coreTokens.disableTypeChecksHelper);
//# sourceMappingURL=disable-type-checks-preprocessor.js.map